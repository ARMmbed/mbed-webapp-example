<?xml version="1.0"?>

<ruleset name="mbed ruleset" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

    <description>pmd-rule-main.xml</description>

    <rule ref="rulesets/java/basic.xml">
    </rule>
    <rule ref="rulesets/java/braces.xml"/>
    <rule ref="rulesets/java/clone.xml"/>

    <rule ref="rulesets/java/codesize.xml">
        <!-- See the explanation for TooManyMethods.-->
        <exclude name="TooManyFields"/>
        <!-- Design is very hard to measure by numbers like this.-->
        <!-- The number and quality of dependencies might be a better indicator, -->
        <!-- and that requires a different tool.-->
        <exclude name="TooManyMethods"/>
        <!-- See the explanation for TooManyMethods.-->
        <exclude name="ExcessivePublicCount"/>
        <!-- Needs better understanding and proper configuration-->
        <exclude name="StdCyclomaticComplexity"/>
        <!-- Needs better understanding and proper configuration-->
        <exclude name="ModifiedCyclomaticComplexity"/>
        <!-- See the explanation for TooManyMethods.-->
        <exclude name="ExcessiveParameterList"/>
    </rule>
    <rule ref="rulesets/java/codesize.xml/CyclomaticComplexity">
        <properties>
            <property name="reportLevel" value="20"/>
        </properties>
    </rule>

    <rule ref="rulesets/java/codesize.xml/NPathComplexity">
        <properties>
            <property name="minimum" value="400"/>
        </properties>
    </rule>

    <rule ref="rulesets/java/controversial.xml">
        <!-- If it's the only place for the literal, a constant is overkill.-->
        <!-- Besides, this check complains about null checks.-->
        <exclude name="AvoidLiteralsInIfCondition"/>
        <!-- Some of these might be good findings, a pity that they cannot be-->
        <!-- individually enabled. DD makes some good code e.g. in hashCode-->
        <!-- calculations (no need to declare a new variable for each stage)-->
        <exclude name="DataflowAnomalyAnalysis"/>
        <!-- Yeah, "explicit" is a good idea but there is no explicit keyword-->
        <!-- for package visibility-->
        <exclude name="DefaultPackage"/>
        <!-- Null has a meaning and that meaning often needs to be communicated.-->
        <!-- This is a symptom of the general fear of NPEs that's complete-->
        <!-- opposite to XP's principle of courage-->
        <exclude name="NullAssignment"/>
        <!-- Plain stupid idea in languages that have 'finally' for cleanup.-->
        <!-- Following this easily increases cyclomatic complexity.-->
        <exclude name="OnlyOneReturn"/>
        <!-- TODO explain why-->
        <exclude name="CallSuperInConstructor"/>
        <!-- TODO explain why-->
        <exclude name="DontImportSun"/>
        <!-- TODO explain why-->
        <exclude name="UseConcurrentHashMap"/>
        <!-- Sometimes you need 16 bits, you just need to know-->
        <!-- how/why to use and not use this type.-->
        <exclude name="AvoidUsingShortType"/>
        <!-- Even if JIT is not taking advantage of this hint, it might be useful-->
        <!-- in reasoning about the correctness of a code-->
        <exclude name="AvoidFinalLocalVariable"/>
        <!-- TODO explain why-->
        <exclude name="AssignmentInOperand"/>
        <!-- TODO explain why-->
        <exclude name="UseObjectForClearerAPI"/>
        <!-- Sometimes the implicit default constructor just is enough.-->
        <!-- And reducing its visibility is often just extra text,a worse problem than someone unnecessary instantiating a static utility,for example.-->
        <exclude name="AtLeastOneConstructor"/>
    </rule>
    <rule ref="rulesets/java/coupling.xml">
        <!-- TODO explain why. Really.-->
        <exclude name="LawOfDemeter"/>
        <!-- Dependencies are best restricted by splitting to modules-->
        <!-- and only depending on correct modules-->
        <exclude name="LoosePackageCoupling"/>
        <!-- See the explanation for TooManyMethods.-->
        <exclude name="ExcessiveImports"/>
    </rule>
    <rule ref="rulesets/java/design.xml">
        <!-- Sometimes important to avoid "DOS attack" but not as a general rule-->
        <exclude name="AvoidSynchronizedAtMethodLevel"/>
        <!-- It's just extra effort to write and read the final keyword-->
        <exclude name="ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
        <!-- Maybe good idea if PMD could exclude null checks from this-->
        <exclude name="ConfusingTernary"/>
        <!-- Statistical analysis is prone to givin false positives. Potential god classes-->
        <!-- most probably violate something else, too.-->
        <!-- And dependency analysis tools also help here.-->
        <exclude name="GodClass"/>
        <!-- Switch is sometimes very readable-->
        <exclude name="TooFewBranchesForASwitchStatement"/>
        <!-- A static utility is a static utility even if it masquerades as something-->
        <!-- else by using the Singleton pattern-->
        <exclude name="UseUtilityClass"/>
        <!-- This is good advice, but since it's violated so much in this project-->
        <!-- and the problem is not big (especially with good syntax colouring),-->
        <!-- we'll keep this ignored for now.-->
        <exclude name="AvoidReassigningParameters"/>
        <!-- Good idea almost always, but not quite.-->
        <exclude name="ReturnEmptyArrayRatherThanNull"/>
        <!-- Sometimes one step at a time makes clearer code.-->
        <!-- Debugging is also easier if the return value is in a variable.-->
        <exclude name="UnnecessaryLocalBeforeReturn"/>
        <!-- There are valid reasons for passing arrays (making it nullable for example)-->
        <exclude name="UseVarargs"/>
        <!-- TODO explain what false positives this gives-->
        <exclude name="MissingBreakInSwitch"/>
        <!-- TODO enable when all findings have been fixed-->
        <exclude name="UseLocaleWithCaseConversions"/>
    </rule>
    <rule ref="rulesets/java/finalizers.xml"/>
    <rule ref="rulesets/java/imports.xml">
        <!-- Good idea, but pmd doesn't detect usage from javadoc.-->
        <!-- And eclipse checks this anyway, so excluding it here is not a big loss-->
        <exclude name="UnusedImports"/>
    </rule>
    <rule ref="rulesets/java/j2ee.xml">
        <!-- TODO explain why.-->
        <exclude name="DoNotUseThreads"/>
        <!-- TODO explain why.-->
        <exclude name="DoNotCallSystemExit"/>
    </rule>
    <rule ref="rulesets/java/javabeans.xml">
        <!-- Nonserializable data inside Serializable is bad, but this rule even
            hits nonserializable classes that happen to look like "beans". Who needs
            those "beans" and let tests catch serialization problems: -->
        <exclude name="BeanMembersShouldSerialize"/>
        <!-- What use is a checksum if it's overridden? -->
        <exclude name="MissingSerialVersionUID"/>
    </rule>
    <rule ref="rulesets/java/junit.xml">
        <!-- The test code must be readable enough to deliver the message-->
        <exclude name="JUnitAssertionsShouldIncludeMessage"/>
        <!-- The idea is good, but this rule doesn't find the assert/fail if it's-->
        <!-- inside a helper method-->
        <exclude name="JUnitTestsShouldIncludeAssert"/>
        <!-- Testing one logical thing in a test is a good idea,-->
        <!-- but checking it like this may be too low-level.-->
        <exclude name="JUnitTestContainsTooManyAsserts"/>
    </rule>
    <rule ref="rulesets/java/migrating.xml">
        <!-- The annotation is not as readable and there is no way to state which-->
        <!-- line should throw the exception and with what message-->
        <exclude name="JUnitUseExpected"/>
        <!-- Main code is not junit code-->
        <exclude name="JUnit4TestShouldUseTestAnnotation"/>
    </rule>
    <rule ref="rulesets/java/naming.xml">
        <!-- Often good to start name with Abstract, but on the other hand this-->
        <!-- rule is a bit too much like Hungarian notation and I in interface names.-->
        <!-- Who cares if it's abstract or not when you are using it?-->
        <exclude name="AbstractNaming"/>
        <!-- Opinion, for me a getter is not a command, it's a declarative-->
        <!-- data reference-->
        <exclude name="AvoidFieldNameMatchingMethodName"/>
        <!-- Why should generics not be named properly, like all other things-->
        <!-- (well, except Windows filesystem roots)?-->
        <exclude name="GenericsNaming"/>
        <!-- It can be long if it's the only way to make it good-->
        <exclude name="LongVariable"/>
        <!-- It can be short if it's good-->
        <exclude name="ShortVariable"/>
        <!-- TODO explain why.-->
        <exclude name="BooleanGetMethodName"/>
        <!-- It can be short if it's good-->
        <exclude name="ShortClassName"/>
        <!-- It can be short if it's good-->
        <exclude name="ShortMethodName"/>
    </rule>
    <rule ref="rulesets/java/optimizations.xml">
        <!-- Too many false hits. Optimization can't be done with static analysis.
            Besides, following this may encourage the antipattern of using too broad
            scope for stuff: -->
        <exclude name="AvoidInstantiatingObjectsInLoops"/>
        <!-- Good principle but too verbose in practice: -->
        <exclude name="MethodArgumentCouldBeFinal"/>
        <!-- Good principle and maybe sometimes even practical but not in this
            project: -->
        <exclude name="LocalVariableCouldBeFinal"/>
    </rule>
    <rule ref="rulesets/java/strictexception.xml">
        <!-- NPE communicates very cleary what is happening, it is not-->
        <!-- interesting who reports it (jvm or user code)-->
        <exclude name="AvoidThrowingNullPointerException"/>
        <!-- TODO explain why-->
        <exclude name="AvoidCatchingGenericException"/>
        <!-- TODO explain why-->
        <exclude name="AvoidThrowingRawExceptionTypes"/>
        <!-- One valid case is to catch runtime, throw as such and after that-->
        <!-- catch Exception and wrap as runtime.-->
        <!-- Without the first all runtimes are unnecessarily wrapped.-->
        <exclude name="AvoidRethrowingException"/>
    </rule>
    <rule ref="rulesets/java/strings.xml">
        <!-- Splitting to multiple lines is sometimes more readable.-->
        <!-- Besides, where's the proof that it affects performance?-->
        <exclude name="ConsecutiveAppendsShouldReuse"/>
    </rule>
    <rule ref="rulesets/java/sunsecure.xml">
        <!-- TODO explain why.-->
        <exclude name="MethodReturnsInternalArray"/>
        <!-- TODO explain why.-->
        <exclude name="ArrayIsStoredDirectly"/>
    </rule>
    <rule ref="rulesets/java/unusedcode.xml">
        <!-- Gives false positives. IDEs help here better.-->
        <exclude name="UnusedPrivateMethod"/>
    </rule>

</ruleset>
